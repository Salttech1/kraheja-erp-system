package kraheja.adminexp.billing.dataentry.invoiceCreation.mappers;import java.math.BigInteger;import java.time.LocalDate;import java.time.LocalDateTime;import java.util.Objects;import java.util.function.BiFunction;import java.util.function.Function;import kraheja.adminexp.billing.dataentry.invoiceCreation.bean.request.InvoiceheaderRequestBean;import kraheja.adminexp.billing.dataentry.invoiceCreation.bean.response.InvoiceheaderResponseBean;import kraheja.adminexp.billing.dataentry.invoiceCreation.bean.response.InvoiceheaderResponseBean.InvoiceheaderResponseBeanBuilder;import kraheja.adminexp.billing.dataentry.invoiceCreation.entity.Invoiceheader;import kraheja.adminexp.billing.dataentry.invoiceCreation.entity.InvoiceheaderCK;import kraheja.commons.filter.GenericAuditContextHolder;import kraheja.commons.utils.CommonConstraints;public interface InvoiceheaderEntityPojoMapper {	@SuppressWarnings("unchecked")	public static Function<Object[], InvoiceheaderResponseBean> fetchInvoiceheaderEntityPojoMapper = objectArray -> {		Invoiceheader invoiceheaderEntity = (Invoiceheader) (Objects.nonNull(objectArray[BigInteger.ZERO.intValue()])				? objectArray[BigInteger.ZERO.intValue()]				: null);		InvoiceheaderResponseBeanBuilder invoiceheaderResponseBean = InvoiceheaderResponseBean.builder();		invoiceheaderResponseBean				.invoiceno(invoiceheaderEntity.getInvoiceheaderCK().getInvhInvoiceno())				.actranser(invoiceheaderEntity.getInvhActranser()).billtype(invoiceheaderEntity.getInvhBilltype())				.bldgcode(invoiceheaderEntity.getInvhBldgcode()).carno(invoiceheaderEntity.getInvhCarno())				.chasisno(invoiceheaderEntity.getInvhChasisno()).coy(invoiceheaderEntity.getInvhCoy())				.irnno(invoiceheaderEntity.getInvhIrnno()).model(invoiceheaderEntity.getInvhModel())				.origsite(invoiceheaderEntity.getInvhOrigsite()).partycode(invoiceheaderEntity.getInvhPartycode())				.partytype(invoiceheaderEntity.getInvhPartytype())				.periodfrom(Objects.nonNull(invoiceheaderEntity.getInvhPeriodfrom())						? invoiceheaderEntity.getInvhPeriodfrom().format(CommonConstraints.INSTANCE.DDMMYYYY_FORMATTER)						: null)				.periodto(Objects.nonNull(invoiceheaderEntity.getInvhPeriodto())						? invoiceheaderEntity.getInvhPeriodto().format(CommonConstraints.INSTANCE.DDMMYYYY_FORMATTER)						: null)				.postedyn(invoiceheaderEntity.getInvhPostedyn()).remarks(invoiceheaderEntity.getInvhRemarks())				.site(invoiceheaderEntity.getInvhSite()).subtitle(invoiceheaderEntity.getInvhSubtitle())				.today(invoiceheaderEntity.getInvhToday()).tranamt(invoiceheaderEntity.getInvhTranamt())				.trandate(Objects.nonNull(invoiceheaderEntity.getInvhTrandate())						? invoiceheaderEntity.getInvhTrandate().format(CommonConstraints.INSTANCE.DDMMYYYY_FORMATTER)						: null)				.userid(invoiceheaderEntity.getInvhUserid()).build();		return invoiceheaderResponseBean.build();	};	public static Function<InvoiceheaderRequestBean, Invoiceheader> addInvoiceheaderPojoEntityMapper = invoiceheaderRequestBean -> {		return Invoiceheader.builder()				.invoiceheaderCK(						InvoiceheaderCK.builder().invhInvoiceno(invoiceheaderRequestBean.getInvoiceno()).build())				.invhActranser(invoiceheaderRequestBean.getActranser())				.invhBilltype(invoiceheaderRequestBean.getBilltype())				.invhBldgcode(invoiceheaderRequestBean.getBldgcode()).invhCarno(invoiceheaderRequestBean.getCarno())				.invhChasisno(invoiceheaderRequestBean.getChasisno()).invhCoy(invoiceheaderRequestBean.getCoy())				.invhIrnno(invoiceheaderRequestBean.getIrnno()).invhModel(invoiceheaderRequestBean.getModel())				.invhOrigsite(GenericAuditContextHolder.getContext().getSite())				.invhPartycode(invoiceheaderRequestBean.getPartycode())				.invhPartytype(invoiceheaderRequestBean.getPartytype())				.invhPeriodfrom(Objects.nonNull(invoiceheaderRequestBean.getPeriodfrom()) ? LocalDate.parse(						invoiceheaderRequestBean.getPeriodfrom(), CommonConstraints.INSTANCE.DDMMYYYY_FORMATTER) : null)				.invhPeriodto(Objects.nonNull(invoiceheaderRequestBean.getPeriodto()) ? LocalDate.parse(						invoiceheaderRequestBean.getPeriodto(), CommonConstraints.INSTANCE.DDMMYYYY_FORMATTER) : null)				.invhPostedyn(invoiceheaderRequestBean.getPostedyn()).invhRemarks(invoiceheaderRequestBean.getRemarks())				.invhSite(GenericAuditContextHolder.getContext().getSite())				.invhSubtitle(invoiceheaderRequestBean.getSubtitle()).invhToday(LocalDateTime.now())				.invhTranamt(						Objects.nonNull(invoiceheaderRequestBean.getTranamt()) ? invoiceheaderRequestBean.getTranamt()								: BigInteger.ZERO.intValue())				.invhTrandate(Objects.nonNull(invoiceheaderRequestBean.getTrandate()) ? LocalDate.parse(						invoiceheaderRequestBean.getTrandate(), CommonConstraints.INSTANCE.DDMMYYYY_FORMATTER) : null)				.invhUserid(GenericAuditContextHolder.getContext().getUserid())				.build();	};	public static BiFunction<Invoiceheader, InvoiceheaderRequestBean, Invoiceheader> updateInvoiceheaderEntityPojoMapper = (			invoiceheaderEntity, invoiceheaderRequestBean) -> {		invoiceheaderEntity.getInvoiceheaderCK()				.setInvhInvoiceno(Objects.nonNull(invoiceheaderRequestBean.getInvoiceno())						? invoiceheaderRequestBean.getInvoiceno().trim()						: invoiceheaderEntity.getInvoiceheaderCK().getInvhInvoiceno());		invoiceheaderEntity.setInvhActranser(Objects.nonNull(invoiceheaderRequestBean.getActranser())				? invoiceheaderRequestBean.getActranser().trim()				: invoiceheaderEntity.getInvhActranser());		invoiceheaderEntity.setInvhBilltype(				Objects.nonNull(invoiceheaderRequestBean.getBilltype()) ? invoiceheaderRequestBean.getBilltype().trim()						: invoiceheaderEntity.getInvhBilltype());		invoiceheaderEntity.setInvhBldgcode(				Objects.nonNull(invoiceheaderRequestBean.getBldgcode()) ? invoiceheaderRequestBean.getBldgcode().trim()						: invoiceheaderEntity.getInvhBldgcode());		invoiceheaderEntity.setInvhCarno(				Objects.nonNull(invoiceheaderRequestBean.getCarno()) ? invoiceheaderRequestBean.getCarno().trim()						: invoiceheaderEntity.getInvhCarno());		invoiceheaderEntity.setInvhChasisno(				Objects.nonNull(invoiceheaderRequestBean.getChasisno()) ? invoiceheaderRequestBean.getChasisno().trim()						: invoiceheaderEntity.getInvhChasisno());		invoiceheaderEntity.setInvhCoy(				Objects.nonNull(invoiceheaderRequestBean.getCoy()) ? invoiceheaderRequestBean.getCoy().trim()						: invoiceheaderEntity.getInvhCoy());		invoiceheaderEntity.setInvhIrnno(				Objects.nonNull(invoiceheaderRequestBean.getIrnno()) ? invoiceheaderRequestBean.getIrnno().trim()						: invoiceheaderEntity.getInvhIrnno());		invoiceheaderEntity.setInvhModel(				Objects.nonNull(invoiceheaderRequestBean.getModel()) ? invoiceheaderRequestBean.getModel().trim()						: invoiceheaderEntity.getInvhModel());		invoiceheaderEntity.setInvhOrigsite(GenericAuditContextHolder.getContext().getSite());		invoiceheaderEntity.setInvhPartycode(Objects.nonNull(invoiceheaderRequestBean.getPartycode())				? invoiceheaderRequestBean.getPartycode().trim()				: invoiceheaderEntity.getInvhPartycode());		invoiceheaderEntity.setInvhPartytype(Objects.nonNull(invoiceheaderRequestBean.getPartytype())				? invoiceheaderRequestBean.getPartytype().trim()				: invoiceheaderEntity.getInvhPartytype());		invoiceheaderEntity				.setInvhPeriodfrom(Objects.nonNull(invoiceheaderRequestBean.getPeriodfrom())						? LocalDate.parse(invoiceheaderRequestBean.getPeriodfrom(),								CommonConstraints.INSTANCE.DDMMYYYY_FORMATTER)						: invoiceheaderEntity.getInvhPeriodfrom());		invoiceheaderEntity.setInvhPeriodto(Objects.nonNull(invoiceheaderRequestBean.getPeriodto())				? LocalDate.parse(invoiceheaderRequestBean.getPeriodto(), CommonConstraints.INSTANCE.DDMMYYYY_FORMATTER)				: invoiceheaderEntity.getInvhPeriodto());		invoiceheaderEntity.setInvhPostedyn(				Objects.nonNull(invoiceheaderRequestBean.getPostedyn()) ? invoiceheaderRequestBean.getPostedyn().trim()						: invoiceheaderEntity.getInvhPostedyn());		invoiceheaderEntity.setInvhRemarks(				Objects.nonNull(invoiceheaderRequestBean.getRemarks()) ? invoiceheaderRequestBean.getRemarks().trim()						: invoiceheaderEntity.getInvhRemarks());		invoiceheaderEntity.setInvhSite(GenericAuditContextHolder.getContext().getSite());		invoiceheaderEntity.setInvhSubtitle(				Objects.nonNull(invoiceheaderRequestBean.getSubtitle()) ? invoiceheaderRequestBean.getSubtitle().trim()						: invoiceheaderEntity.getInvhSubtitle());		invoiceheaderEntity.setInvhToday(LocalDateTime.now());		invoiceheaderEntity.setInvhTranamt(				Objects.nonNull(invoiceheaderRequestBean.getTranamt()) ? invoiceheaderRequestBean.getTranamt()						: invoiceheaderEntity.getInvhTranamt());		invoiceheaderEntity.setInvhTrandate(Objects.nonNull(invoiceheaderRequestBean.getTrandate())				? LocalDate.parse(invoiceheaderRequestBean.getTrandate(), CommonConstraints.INSTANCE.DDMMYYYY_FORMATTER)				: invoiceheaderEntity.getInvhTrandate());		invoiceheaderEntity.setInvhUserid(GenericAuditContextHolder.getContext().getUserid());		return invoiceheaderEntity;	};}